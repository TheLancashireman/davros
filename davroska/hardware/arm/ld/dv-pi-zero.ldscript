/* dv-pi-zero.ldscript
 *
 * Copyright David Haworth
 *
 * This file is part of davros.
 *
 * davros is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * davros is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with davros.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *
 * Memory layout:
 *
 * Pi zero has 512 MiB memory starting at 0
 *
 * 0x00000000 <= addr < 0x00000040		Reserved for vectors (8+8 words = 64 bytes)
 * 0x00000040 <= addr < 0x00004000		Unused
 * 0x00004000 <= addr < 0x80000000		Pagetable (4096 words = 16 KiB, must be aligned on 16 KiB boundary)
 * 0x00008000 <= addr < dv_end_bss		Memory (text, rodata, data, bss)
 * dv_end_bss <= addr < ??????????		Stacks for extended tasks (allocated at startup)
 * ?????????? <= addr < 0x1e000000		Stack for basic tasks, isrs and kernel (grows down from top)
 * 0x1e000000 <= addr < 0x20000000		Video memory (32 MiB is the minimum - set gpu_mem=32 in config.txt)
 *
 * 0x20000000 <= addr < 0x22000000		Peripheral area (32 MiB)
*/

MEMORY
{
    mem : org = 0x08000, len = 0x1dff8000
}

SECTIONS
{
	dv_pagetable = 0x4000;				/* 16 KiB aligned */
	dv_start_mem = 0x8000;

    .text		:
	{
		*(.vectors*)
		*(.text*)
	} > mem

	.rodata		ALIGN(4096) :
	{
		*(.rodata*)
	} > mem

	.data		ALIGN(4096) :
	{
		*(.data*)
	} > mem

    .bss		ALIGN(16)	:
	{
		dv_start_bss = .;
		*(.bss*)
		dv_end_bss = .;
	} > mem

	dv_end_mem = 0x1e000000;			/* Assumes GPU memory of 32 MB */
	dv_peripheral = 0x20000000;			/* Start of peripheral block */
	dv_peripheral_end = 0x22000000;		/* End of peripheral block (physical limit may be much less) */


  /* These sections appear to be generated by the compiler.
   * We doesn't use them.
  */
    .stack              : { *(.stack)       }

  /* The remainder are DWARF-2 debug sections. They contain
   * ELF relocations and must be located at zero.
  */
    . = 0x0;
    .debug_aranges      : { *(.debug_aranges)   }
    . = 0x0;
    .debug_pubnames     : { *(.debug_pubnames)  }
    . = 0x0;
    .debug_info         : { *(.debug_info)  }
    . = 0x0;
    .debug_abbrev       : { *(.debug_abbrev)    }
    . = 0x0;
    .debug_line         : { *(.debug_line)  }
}
