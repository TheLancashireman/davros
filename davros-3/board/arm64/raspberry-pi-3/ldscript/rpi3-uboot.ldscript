/* U-boot loads the binary at 0x10800000.
 * This script places the vectors there, so that "go 0x10800000" works like reset.
 * Immediately after the vectors comes the code and rom data
 * Variables are placed at 0x10900000 (i.e. 0x100000 above the ROM base)
 *
 * All these addresses are in the DDR area.
*/

MEMORY
{
	ram	: org = 0x10800000,	len = 0x2d800000
}

SECTIONS
{
    .text		:
	{
		dv_start_text = .;
		*(.text*)
		dv_end_text = .;
	} > ram
	.rodata		ALIGN(4096) :
	{
		dv_start_rodata = .;
		*(.rodata*)
		dv_end_rodata = .;
	} > ram

	.c0_pgtbl	ALIGN(16384) :
	{
		dv_start_pgtbl_c0 = .;
		*(dv_pagetable)
		dv_end_pgtbl_c0 = .;
	} > ram

	.c0_stack	ALIGN(4096)	:
	{
		dv_start_stack_c0 = .;
		*(dv_stack)
		dv_end_stack_c0 = .;
	} > ram

	.c0_data	ALIGN(4096)	:
	{
		dv_start_data_c0 = .;
		*(.data*)
		dv_end_data_c0 = .;
	} > ram
    .c0_bss		ALIGN(16)	:
	{
		dv_start_bss_c0 = .;
		*(.bss*)
		dv_end_bss_c0 = .;
	} > ram

	dv_c0_pages = ALIGN(4096);
	dv_end_ram = 0x3e000000;			/* Assumes GPU memory of 32 MB */

  /* These sections appear to be generated by the compiler.
   * We doesn't use them.
  */
    .stack              : { *(.stack)       }

  /* The remainder are DWARF-2 debug sections. They contain
   * ELF relocations and must be located at zero.
  */
    . = 0x0;
    .debug_aranges      : { *(.debug_aranges)   }
    . = 0x0;
    .debug_pubnames     : { *(.debug_pubnames)  }
    . = 0x0;
    .debug_info         : { *(.debug_info)  }
    . = 0x0;
    .debug_abbrev       : { *(.debug_abbrev)    }
    . = 0x0;
    .debug_line         : { *(.debug_line)  }
}
