/* U-boot loads the binary at 0x10800000.
 * This script places the vectors there, so that "go 0x10800000" works like reset.
 * Immediately after the vectors comes the code and rom data
 * Variables are placed at 0x10900000 (i.e. 0x100000 above the ROM base)
 *
 * All these addresses are in the DDR area.
*/
MEMORY
{
	ram	: org = 0x80000,	len = 0x80000		/* ram */
}

SECTIONS
{
	.start				: { playAsm.o(.text)	} > ram

	__text_start = .;
    .text				: { *(.text)		} > ram
    .rodata				: { *(.rodata)		} > ram
	__text_end = .;

	__data_start = .;
    .zdata	BLOCK(8)	: { *(.zdata)		} > ram
    .sdata				: { *(.sdata)		} > ram
    .data				: { *(.data)		} > ram
    .edata				: { *(.edata)		} > ram
	__data_end = .;

	__bss_start = .;
    .zbss				: { *(.zbss)		} > ram
    .sbss				: { *(.sbss)		} > ram
    .bss				: { *(.bss)			} > ram
    .eend				: { *(.eend)		} > ram
	__bss_end = .;

  /* These sections appear to be generated by the compiler.
   * We doesn't use them.
  */
    .stack				: { *(.stack)		}

  /* The remainder are DWARF-2 debug sections. They contain
   * ELF relocations and must be located at zero.
  */
    . = 0x0;
    .debug_aranges		: { *(.debug_aranges)	}
    . = 0x0;
    .debug_pubnames		: { *(.debug_pubnames)	}
    . = 0x0;
    .debug_info			: { *(.debug_info)	}
    . = 0x0;
    .debug_abbrev		: { *(.debug_abbrev)	}
    . = 0x0;
    .debug_line			: { *(.debug_line)	}
}
