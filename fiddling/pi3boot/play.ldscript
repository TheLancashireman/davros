/* U-boot loads the binary at 0x10800000.
 * This script places the vectors there, so that "go 0x10800000" works like reset.
 * Immediately after the vectors comes the code and rom data
 * Variables are placed at 0x10900000 (i.e. 0x100000 above the ROM base)
 *
 * All these addresses are in the DDR area.
*/
MEMORY
{
	ram	: org = 0x80000,	len = 0x80000		/* ram */
}

SECTIONS
{
	.text :
	{
		__text_start = .;
		playAsm.o(.text)
    	*(.text*)
		__text_end = .;
	} > ram

    .rodata ALIGN(32) :
	{
		__rodata_start = .;
		*(.rodata)
		__rodata_end = .;
	} > ram

    .data ALIGN(32) :
	{
		__data_start = .;
	    *(.zdata)
	    *(.sdata)
	    *(.data)
	    *(.edata)
		__data_end = .;
	} > ram

	.bss ALIGN(32) :
	{
		__bss_start = .;
	    *(.zbss)
	    *(.sbss)
	    *(.bss)	
	    *(.eend)
		__bss_end = .;
	} > ram

  /* These sections appear to be generated by the compiler.
   * We doesn't use them.
  */
    .stack				: { *(.stack)		}

  /* The remainder are DWARF-2 debug sections. They contain
   * ELF relocations and must be located at zero.
  */
    . = 0x0;
    .debug_aranges		: { *(.debug_aranges)	}
    . = 0x0;
    .debug_pubnames		: { *(.debug_pubnames)	}
    . = 0x0;
    .debug_info			: { *(.debug_info)	}
    . = 0x0;
    .debug_abbrev		: { *(.debug_abbrev)	}
    . = 0x0;
    .debug_line			: { *(.debug_line)	}
}
